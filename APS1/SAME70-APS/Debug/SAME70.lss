
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001604  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401604  00401604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20400000  0040160c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  2040043c  00401a48  0002043c  2**2
                  ALLOC
  4 .stack        00002004  204004ec  00401af8  0002043c  2**0
                  ALLOC
  5 .heap         00000200  204024f0  00403afc  0002043c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b0ee  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001859  00000000  00000000  0002b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002522  00000000  00000000  0002ce0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000568  00000000  00000000  0002f32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0002f894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c210  00000000  00000000  0002fe8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068bf  00000000  00000000  0004c09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000893a2  00000000  00000000  0005295b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000d1c  00000000  00000000  000dbd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 24 40 20 f5 05 40 00 f1 05 40 00 f1 05 40 00     .$@ ..@...@...@.
  400010:	f1 05 40 00 f1 05 40 00 f1 05 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 05 40 00 f1 05 40 00 00 00 00 00 f1 05 40 00     ..@...@.......@.
  40003c:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  40004c:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  40005c:	f1 05 40 00 f1 05 40 00 00 00 00 00 19 04 40 00     ..@...@.......@.
  40006c:	2d 04 40 00 41 04 40 00 f1 05 40 00 f1 05 40 00     -.@.A.@...@...@.
  40007c:	f1 05 40 00 55 04 40 00 69 04 40 00 f1 05 40 00     ..@.U.@.i.@...@.
  40008c:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  40009c:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  4000ac:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  4000bc:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  4000cc:	f1 05 40 00 00 00 00 00 f1 05 40 00 00 00 00 00     ..@.......@.....
  4000dc:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  4000ec:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  4000fc:	f1 05 40 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ..@...@...@...@.
  40010c:	f1 05 40 00 f1 05 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f1 05 40 00 f1 05 40 00 f1 05 40 00     ......@...@...@.
  40012c:	f1 05 40 00 f1 05 40 00 00 00 00 00 f1 05 40 00     ..@...@.......@.
  40013c:	f1 05 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040043c 	.word	0x2040043c
  40015c:	00000000 	.word	0x00000000
  400160:	0040160c 	.word	0x0040160c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040160c 	.word	0x0040160c
  4001a0:	20400440 	.word	0x20400440
  4001a4:	0040160c 	.word	0x0040160c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004007c9 	.word	0x004007c9
  4001f8:	00400519 	.word	0x00400519
  4001fc:	0040056d 	.word	0x0040056d
  400200:	0040057d 	.word	0x0040057d
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	0040058d 	.word	0x0040058d
  400210:	0040047d 	.word	0x0040047d
  400214:	004004b5 	.word	0x004004b5
  400218:	004006bd 	.word	0x004006bd

0040021c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40021c:	6301      	str	r1, [r0, #48]	; 0x30
  40021e:	4770      	bx	lr

00400220 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400220:	6341      	str	r1, [r0, #52]	; 0x34
  400222:	4770      	bx	lr

00400224 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400224:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400228:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40022c:	d105      	bne.n	40023a <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  40022e:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400230:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400232:	bf14      	ite	ne
  400234:	2001      	movne	r0, #1
  400236:	2000      	moveq	r0, #0
  400238:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40023a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40023c:	e7f8      	b.n	400230 <pio_get+0xc>

0040023e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40023e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400240:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400244:	d03a      	beq.n	4002bc <pio_set_peripheral+0x7e>
  400246:	d813      	bhi.n	400270 <pio_set_peripheral+0x32>
  400248:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40024c:	d025      	beq.n	40029a <pio_set_peripheral+0x5c>
  40024e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400252:	d10a      	bne.n	40026a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400254:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400256:	4313      	orrs	r3, r2
  400258:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40025a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40025c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40025e:	400b      	ands	r3, r1
  400260:	ea23 0302 	bic.w	r3, r3, r2
  400264:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400266:	6042      	str	r2, [r0, #4]
  400268:	4770      	bx	lr
	switch (ul_type) {
  40026a:	2900      	cmp	r1, #0
  40026c:	d1fb      	bne.n	400266 <pio_set_peripheral+0x28>
  40026e:	4770      	bx	lr
  400270:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400274:	d021      	beq.n	4002ba <pio_set_peripheral+0x7c>
  400276:	d809      	bhi.n	40028c <pio_set_peripheral+0x4e>
  400278:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40027c:	d1f3      	bne.n	400266 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40027e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400280:	4313      	orrs	r3, r2
  400282:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400284:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400286:	4313      	orrs	r3, r2
  400288:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40028a:	e7ec      	b.n	400266 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40028c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400290:	d013      	beq.n	4002ba <pio_set_peripheral+0x7c>
  400292:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400296:	d010      	beq.n	4002ba <pio_set_peripheral+0x7c>
  400298:	e7e5      	b.n	400266 <pio_set_peripheral+0x28>
{
  40029a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40029c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40029e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002a0:	43d3      	mvns	r3, r2
  4002a2:	4021      	ands	r1, r4
  4002a4:	461c      	mov	r4, r3
  4002a6:	4019      	ands	r1, r3
  4002a8:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002ae:	400b      	ands	r3, r1
  4002b0:	4023      	ands	r3, r4
  4002b2:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4002b4:	6042      	str	r2, [r0, #4]
}
  4002b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ba:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002be:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4002c0:	400b      	ands	r3, r1
  4002c2:	ea23 0302 	bic.w	r3, r3, r2
  4002c6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002ca:	4313      	orrs	r3, r2
  4002cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002ce:	e7ca      	b.n	400266 <pio_set_peripheral+0x28>

004002d0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002d0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4002d2:	f012 0f01 	tst.w	r2, #1
  4002d6:	d10d      	bne.n	4002f4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4002d8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4002da:	f012 0f0a 	tst.w	r2, #10
  4002de:	d00b      	beq.n	4002f8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4002e0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4002e2:	f012 0f02 	tst.w	r2, #2
  4002e6:	d109      	bne.n	4002fc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4002e8:	f012 0f08 	tst.w	r2, #8
  4002ec:	d008      	beq.n	400300 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4002ee:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4002f2:	e005      	b.n	400300 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4002f4:	6641      	str	r1, [r0, #100]	; 0x64
  4002f6:	e7f0      	b.n	4002da <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4002f8:	6241      	str	r1, [r0, #36]	; 0x24
  4002fa:	e7f2      	b.n	4002e2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4002fc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400300:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400302:	6001      	str	r1, [r0, #0]
  400304:	4770      	bx	lr

00400306 <pio_set_output>:
{
  400306:	b410      	push	{r4}
  400308:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40030a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40030c:	b94c      	cbnz	r4, 400322 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40030e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400310:	b14b      	cbz	r3, 400326 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400312:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400314:	b94a      	cbnz	r2, 40032a <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400316:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400318:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40031a:	6001      	str	r1, [r0, #0]
}
  40031c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400320:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400322:	6641      	str	r1, [r0, #100]	; 0x64
  400324:	e7f4      	b.n	400310 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400326:	6541      	str	r1, [r0, #84]	; 0x54
  400328:	e7f4      	b.n	400314 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40032a:	6301      	str	r1, [r0, #48]	; 0x30
  40032c:	e7f4      	b.n	400318 <pio_set_output+0x12>
	...

00400330 <pio_configure>:
{
  400330:	b570      	push	{r4, r5, r6, lr}
  400332:	b082      	sub	sp, #8
  400334:	4605      	mov	r5, r0
  400336:	4616      	mov	r6, r2
  400338:	461c      	mov	r4, r3
	switch (ul_type) {
  40033a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40033e:	d014      	beq.n	40036a <pio_configure+0x3a>
  400340:	d90a      	bls.n	400358 <pio_configure+0x28>
  400342:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400346:	d024      	beq.n	400392 <pio_configure+0x62>
  400348:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40034c:	d021      	beq.n	400392 <pio_configure+0x62>
  40034e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400352:	d017      	beq.n	400384 <pio_configure+0x54>
		return 0;
  400354:	2000      	movs	r0, #0
  400356:	e01a      	b.n	40038e <pio_configure+0x5e>
	switch (ul_type) {
  400358:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40035c:	d005      	beq.n	40036a <pio_configure+0x3a>
  40035e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400362:	d002      	beq.n	40036a <pio_configure+0x3a>
  400364:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400368:	d1f4      	bne.n	400354 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40036a:	4632      	mov	r2, r6
  40036c:	4628      	mov	r0, r5
  40036e:	4b11      	ldr	r3, [pc, #68]	; (4003b4 <pio_configure+0x84>)
  400370:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400372:	f014 0f01 	tst.w	r4, #1
  400376:	d102      	bne.n	40037e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400378:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40037a:	2001      	movs	r0, #1
  40037c:	e007      	b.n	40038e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40037e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400380:	2001      	movs	r0, #1
  400382:	e004      	b.n	40038e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400384:	461a      	mov	r2, r3
  400386:	4631      	mov	r1, r6
  400388:	4b0b      	ldr	r3, [pc, #44]	; (4003b8 <pio_configure+0x88>)
  40038a:	4798      	blx	r3
	return 1;
  40038c:	2001      	movs	r0, #1
}
  40038e:	b002      	add	sp, #8
  400390:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400392:	f004 0301 	and.w	r3, r4, #1
  400396:	9300      	str	r3, [sp, #0]
  400398:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40039c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4003a0:	bf14      	ite	ne
  4003a2:	2200      	movne	r2, #0
  4003a4:	2201      	moveq	r2, #1
  4003a6:	4631      	mov	r1, r6
  4003a8:	4628      	mov	r0, r5
  4003aa:	4c04      	ldr	r4, [pc, #16]	; (4003bc <pio_configure+0x8c>)
  4003ac:	47a0      	blx	r4
	return 1;
  4003ae:	2001      	movs	r0, #1
		break;
  4003b0:	e7ed      	b.n	40038e <pio_configure+0x5e>
  4003b2:	bf00      	nop
  4003b4:	0040023f 	.word	0x0040023f
  4003b8:	004002d1 	.word	0x004002d1
  4003bc:	00400307 	.word	0x00400307

004003c0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003c2:	4770      	bx	lr

004003c4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003c4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003c6:	4770      	bx	lr

004003c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003cc:	4604      	mov	r4, r0
  4003ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003d0:	4b0e      	ldr	r3, [pc, #56]	; (40040c <pio_handler_process+0x44>)
  4003d2:	4798      	blx	r3
  4003d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003d6:	4620      	mov	r0, r4
  4003d8:	4b0d      	ldr	r3, [pc, #52]	; (400410 <pio_handler_process+0x48>)
  4003da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003dc:	4005      	ands	r5, r0
  4003de:	d013      	beq.n	400408 <pio_handler_process+0x40>
  4003e0:	4c0c      	ldr	r4, [pc, #48]	; (400414 <pio_handler_process+0x4c>)
  4003e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4003e6:	e003      	b.n	4003f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4003e8:	42b4      	cmp	r4, r6
  4003ea:	d00d      	beq.n	400408 <pio_handler_process+0x40>
  4003ec:	3410      	adds	r4, #16
		while (status != 0) {
  4003ee:	b15d      	cbz	r5, 400408 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4003f0:	6820      	ldr	r0, [r4, #0]
  4003f2:	4540      	cmp	r0, r8
  4003f4:	d1f8      	bne.n	4003e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4003f6:	6861      	ldr	r1, [r4, #4]
  4003f8:	4229      	tst	r1, r5
  4003fa:	d0f5      	beq.n	4003e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4003fc:	68e3      	ldr	r3, [r4, #12]
  4003fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400400:	6863      	ldr	r3, [r4, #4]
  400402:	ea25 0503 	bic.w	r5, r5, r3
  400406:	e7ef      	b.n	4003e8 <pio_handler_process+0x20>
  400408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40040c:	004003c1 	.word	0x004003c1
  400410:	004003c5 	.word	0x004003c5
  400414:	20400458 	.word	0x20400458

00400418 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400418:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40041a:	210a      	movs	r1, #10
  40041c:	4801      	ldr	r0, [pc, #4]	; (400424 <PIOA_Handler+0xc>)
  40041e:	4b02      	ldr	r3, [pc, #8]	; (400428 <PIOA_Handler+0x10>)
  400420:	4798      	blx	r3
  400422:	bd08      	pop	{r3, pc}
  400424:	400e0e00 	.word	0x400e0e00
  400428:	004003c9 	.word	0x004003c9

0040042c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40042c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40042e:	210b      	movs	r1, #11
  400430:	4801      	ldr	r0, [pc, #4]	; (400438 <PIOB_Handler+0xc>)
  400432:	4b02      	ldr	r3, [pc, #8]	; (40043c <PIOB_Handler+0x10>)
  400434:	4798      	blx	r3
  400436:	bd08      	pop	{r3, pc}
  400438:	400e1000 	.word	0x400e1000
  40043c:	004003c9 	.word	0x004003c9

00400440 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400440:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400442:	210c      	movs	r1, #12
  400444:	4801      	ldr	r0, [pc, #4]	; (40044c <PIOC_Handler+0xc>)
  400446:	4b02      	ldr	r3, [pc, #8]	; (400450 <PIOC_Handler+0x10>)
  400448:	4798      	blx	r3
  40044a:	bd08      	pop	{r3, pc}
  40044c:	400e1200 	.word	0x400e1200
  400450:	004003c9 	.word	0x004003c9

00400454 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400454:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400456:	2110      	movs	r1, #16
  400458:	4801      	ldr	r0, [pc, #4]	; (400460 <PIOD_Handler+0xc>)
  40045a:	4b02      	ldr	r3, [pc, #8]	; (400464 <PIOD_Handler+0x10>)
  40045c:	4798      	blx	r3
  40045e:	bd08      	pop	{r3, pc}
  400460:	400e1400 	.word	0x400e1400
  400464:	004003c9 	.word	0x004003c9

00400468 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400468:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40046a:	2111      	movs	r1, #17
  40046c:	4801      	ldr	r0, [pc, #4]	; (400474 <PIOE_Handler+0xc>)
  40046e:	4b02      	ldr	r3, [pc, #8]	; (400478 <PIOE_Handler+0x10>)
  400470:	4798      	blx	r3
  400472:	bd08      	pop	{r3, pc}
  400474:	400e1600 	.word	0x400e1600
  400478:	004003c9 	.word	0x004003c9

0040047c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40047c:	2803      	cmp	r0, #3
  40047e:	d011      	beq.n	4004a4 <pmc_mck_set_division+0x28>
  400480:	2804      	cmp	r0, #4
  400482:	d012      	beq.n	4004aa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400484:	2802      	cmp	r0, #2
  400486:	bf0c      	ite	eq
  400488:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40048c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40048e:	4a08      	ldr	r2, [pc, #32]	; (4004b0 <pmc_mck_set_division+0x34>)
  400490:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400496:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400498:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40049a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40049c:	f013 0f08 	tst.w	r3, #8
  4004a0:	d0fb      	beq.n	40049a <pmc_mck_set_division+0x1e>
}
  4004a2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4004a4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4004a8:	e7f1      	b.n	40048e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4004aa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4004ae:	e7ee      	b.n	40048e <pmc_mck_set_division+0x12>
  4004b0:	400e0600 	.word	0x400e0600

004004b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004b4:	4a17      	ldr	r2, [pc, #92]	; (400514 <pmc_switch_mck_to_pllack+0x60>)
  4004b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004bc:	4318      	orrs	r0, r3
  4004be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004c2:	f013 0f08 	tst.w	r3, #8
  4004c6:	d10a      	bne.n	4004de <pmc_switch_mck_to_pllack+0x2a>
  4004c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4004cc:	4911      	ldr	r1, [pc, #68]	; (400514 <pmc_switch_mck_to_pllack+0x60>)
  4004ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004d0:	f012 0f08 	tst.w	r2, #8
  4004d4:	d103      	bne.n	4004de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004d6:	3b01      	subs	r3, #1
  4004d8:	d1f9      	bne.n	4004ce <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4004da:	2001      	movs	r0, #1
  4004dc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004de:	4a0d      	ldr	r2, [pc, #52]	; (400514 <pmc_switch_mck_to_pllack+0x60>)
  4004e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004e2:	f023 0303 	bic.w	r3, r3, #3
  4004e6:	f043 0302 	orr.w	r3, r3, #2
  4004ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004ee:	f013 0f08 	tst.w	r3, #8
  4004f2:	d10a      	bne.n	40050a <pmc_switch_mck_to_pllack+0x56>
  4004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4004f8:	4906      	ldr	r1, [pc, #24]	; (400514 <pmc_switch_mck_to_pllack+0x60>)
  4004fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004fc:	f012 0f08 	tst.w	r2, #8
  400500:	d105      	bne.n	40050e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400502:	3b01      	subs	r3, #1
  400504:	d1f9      	bne.n	4004fa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400506:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400508:	4770      	bx	lr
	return 0;
  40050a:	2000      	movs	r0, #0
  40050c:	4770      	bx	lr
  40050e:	2000      	movs	r0, #0
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	400e0600 	.word	0x400e0600

00400518 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400518:	b9a0      	cbnz	r0, 400544 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40051a:	480e      	ldr	r0, [pc, #56]	; (400554 <pmc_switch_mainck_to_xtal+0x3c>)
  40051c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40051e:	0209      	lsls	r1, r1, #8
  400520:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400522:	4a0d      	ldr	r2, [pc, #52]	; (400558 <pmc_switch_mainck_to_xtal+0x40>)
  400524:	401a      	ands	r2, r3
  400526:	4b0d      	ldr	r3, [pc, #52]	; (40055c <pmc_switch_mainck_to_xtal+0x44>)
  400528:	4313      	orrs	r3, r2
  40052a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40052c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40052e:	4602      	mov	r2, r0
  400530:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400532:	f013 0f01 	tst.w	r3, #1
  400536:	d0fb      	beq.n	400530 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400538:	4a06      	ldr	r2, [pc, #24]	; (400554 <pmc_switch_mainck_to_xtal+0x3c>)
  40053a:	6a11      	ldr	r1, [r2, #32]
  40053c:	4b08      	ldr	r3, [pc, #32]	; (400560 <pmc_switch_mainck_to_xtal+0x48>)
  40053e:	430b      	orrs	r3, r1
  400540:	6213      	str	r3, [r2, #32]
  400542:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400544:	4903      	ldr	r1, [pc, #12]	; (400554 <pmc_switch_mainck_to_xtal+0x3c>)
  400546:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400548:	4a06      	ldr	r2, [pc, #24]	; (400564 <pmc_switch_mainck_to_xtal+0x4c>)
  40054a:	401a      	ands	r2, r3
  40054c:	4b06      	ldr	r3, [pc, #24]	; (400568 <pmc_switch_mainck_to_xtal+0x50>)
  40054e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400550:	620b      	str	r3, [r1, #32]
  400552:	4770      	bx	lr
  400554:	400e0600 	.word	0x400e0600
  400558:	ffc8fffc 	.word	0xffc8fffc
  40055c:	00370001 	.word	0x00370001
  400560:	01370000 	.word	0x01370000
  400564:	fec8fffc 	.word	0xfec8fffc
  400568:	01370002 	.word	0x01370002

0040056c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40056c:	4b02      	ldr	r3, [pc, #8]	; (400578 <pmc_osc_is_ready_mainck+0xc>)
  40056e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400570:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	400e0600 	.word	0x400e0600

0040057c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40057c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400580:	4b01      	ldr	r3, [pc, #4]	; (400588 <pmc_disable_pllack+0xc>)
  400582:	629a      	str	r2, [r3, #40]	; 0x28
  400584:	4770      	bx	lr
  400586:	bf00      	nop
  400588:	400e0600 	.word	0x400e0600

0040058c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <pmc_is_locked_pllack+0xc>)
  40058e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400590:	f000 0002 	and.w	r0, r0, #2
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	400e0600 	.word	0x400e0600

0040059c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40059c:	283f      	cmp	r0, #63	; 0x3f
  40059e:	d81e      	bhi.n	4005de <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4005a0:	281f      	cmp	r0, #31
  4005a2:	d80c      	bhi.n	4005be <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4005a4:	4b11      	ldr	r3, [pc, #68]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005a6:	699a      	ldr	r2, [r3, #24]
  4005a8:	2301      	movs	r3, #1
  4005aa:	4083      	lsls	r3, r0
  4005ac:	4393      	bics	r3, r2
  4005ae:	d018      	beq.n	4005e2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4005b0:	2301      	movs	r3, #1
  4005b2:	fa03 f000 	lsl.w	r0, r3, r0
  4005b6:	4b0d      	ldr	r3, [pc, #52]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005b8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr
		ul_id -= 32;
  4005be:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005c0:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4005c6:	2301      	movs	r3, #1
  4005c8:	4083      	lsls	r3, r0
  4005ca:	4393      	bics	r3, r2
  4005cc:	d00b      	beq.n	4005e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005ce:	2301      	movs	r3, #1
  4005d0:	fa03 f000 	lsl.w	r0, r3, r0
  4005d4:	4b05      	ldr	r3, [pc, #20]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4005da:	2000      	movs	r0, #0
  4005dc:	4770      	bx	lr
		return 1;
  4005de:	2001      	movs	r0, #1
  4005e0:	4770      	bx	lr
	return 0;
  4005e2:	2000      	movs	r0, #0
  4005e4:	4770      	bx	lr
  4005e6:	2000      	movs	r0, #0
}
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop
  4005ec:	400e0600 	.word	0x400e0600

004005f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4005f0:	e7fe      	b.n	4005f0 <Dummy_Handler>
	...

004005f4 <Reset_Handler>:
{
  4005f4:	b500      	push	{lr}
  4005f6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4005f8:	4b25      	ldr	r3, [pc, #148]	; (400690 <Reset_Handler+0x9c>)
  4005fa:	4a26      	ldr	r2, [pc, #152]	; (400694 <Reset_Handler+0xa0>)
  4005fc:	429a      	cmp	r2, r3
  4005fe:	d010      	beq.n	400622 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400600:	4b25      	ldr	r3, [pc, #148]	; (400698 <Reset_Handler+0xa4>)
  400602:	4a23      	ldr	r2, [pc, #140]	; (400690 <Reset_Handler+0x9c>)
  400604:	429a      	cmp	r2, r3
  400606:	d20c      	bcs.n	400622 <Reset_Handler+0x2e>
  400608:	3b01      	subs	r3, #1
  40060a:	1a9b      	subs	r3, r3, r2
  40060c:	f023 0303 	bic.w	r3, r3, #3
  400610:	3304      	adds	r3, #4
  400612:	4413      	add	r3, r2
  400614:	491f      	ldr	r1, [pc, #124]	; (400694 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400616:	f851 0b04 	ldr.w	r0, [r1], #4
  40061a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40061e:	429a      	cmp	r2, r3
  400620:	d1f9      	bne.n	400616 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400622:	4b1e      	ldr	r3, [pc, #120]	; (40069c <Reset_Handler+0xa8>)
  400624:	4a1e      	ldr	r2, [pc, #120]	; (4006a0 <Reset_Handler+0xac>)
  400626:	429a      	cmp	r2, r3
  400628:	d20a      	bcs.n	400640 <Reset_Handler+0x4c>
  40062a:	3b01      	subs	r3, #1
  40062c:	1a9b      	subs	r3, r3, r2
  40062e:	f023 0303 	bic.w	r3, r3, #3
  400632:	3304      	adds	r3, #4
  400634:	4413      	add	r3, r2
                *pDest++ = 0;
  400636:	2100      	movs	r1, #0
  400638:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40063c:	4293      	cmp	r3, r2
  40063e:	d1fb      	bne.n	400638 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400640:	4a18      	ldr	r2, [pc, #96]	; (4006a4 <Reset_Handler+0xb0>)
  400642:	4b19      	ldr	r3, [pc, #100]	; (4006a8 <Reset_Handler+0xb4>)
  400644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400648:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40064a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40064e:	fab3 f383 	clz	r3, r3
  400652:	095b      	lsrs	r3, r3, #5
  400654:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400656:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40065c:	2200      	movs	r2, #0
  40065e:	4b13      	ldr	r3, [pc, #76]	; (4006ac <Reset_Handler+0xb8>)
  400660:	701a      	strb	r2, [r3, #0]
	return flags;
  400662:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400664:	4a12      	ldr	r2, [pc, #72]	; (4006b0 <Reset_Handler+0xbc>)
  400666:	6813      	ldr	r3, [r2, #0]
  400668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40066c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40066e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400672:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400676:	b129      	cbz	r1, 400684 <Reset_Handler+0x90>
		cpu_irq_enable();
  400678:	2201      	movs	r2, #1
  40067a:	4b0c      	ldr	r3, [pc, #48]	; (4006ac <Reset_Handler+0xb8>)
  40067c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40067e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400682:	b662      	cpsie	i
        __libc_init_array();
  400684:	4b0b      	ldr	r3, [pc, #44]	; (4006b4 <Reset_Handler+0xc0>)
  400686:	4798      	blx	r3
        main();
  400688:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <Reset_Handler+0xc4>)
  40068a:	4798      	blx	r3
  40068c:	e7fe      	b.n	40068c <Reset_Handler+0x98>
  40068e:	bf00      	nop
  400690:	20400000 	.word	0x20400000
  400694:	0040160c 	.word	0x0040160c
  400698:	2040043c 	.word	0x2040043c
  40069c:	204004ec 	.word	0x204004ec
  4006a0:	2040043c 	.word	0x2040043c
  4006a4:	e000ed00 	.word	0xe000ed00
  4006a8:	00400000 	.word	0x00400000
  4006ac:	2040000a 	.word	0x2040000a
  4006b0:	e000ed88 	.word	0xe000ed88
  4006b4:	00400d45 	.word	0x00400d45
  4006b8:	004009fd 	.word	0x004009fd

004006bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4006bc:	4b3b      	ldr	r3, [pc, #236]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  4006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006c0:	f003 0303 	and.w	r3, r3, #3
  4006c4:	2b01      	cmp	r3, #1
  4006c6:	d01d      	beq.n	400704 <SystemCoreClockUpdate+0x48>
  4006c8:	b183      	cbz	r3, 4006ec <SystemCoreClockUpdate+0x30>
  4006ca:	2b02      	cmp	r3, #2
  4006cc:	d036      	beq.n	40073c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4006ce:	4b37      	ldr	r3, [pc, #220]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  4006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006d6:	2b70      	cmp	r3, #112	; 0x70
  4006d8:	d05f      	beq.n	40079a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4006da:	4b34      	ldr	r3, [pc, #208]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  4006dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4006de:	4934      	ldr	r1, [pc, #208]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  4006e0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4006e4:	680b      	ldr	r3, [r1, #0]
  4006e6:	40d3      	lsrs	r3, r2
  4006e8:	600b      	str	r3, [r1, #0]
  4006ea:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <SystemCoreClockUpdate+0xf8>)
  4006ee:	695b      	ldr	r3, [r3, #20]
  4006f0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4006f4:	bf14      	ite	ne
  4006f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4006fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4006fe:	4b2c      	ldr	r3, [pc, #176]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400700:	601a      	str	r2, [r3, #0]
  400702:	e7e4      	b.n	4006ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400704:	4b29      	ldr	r3, [pc, #164]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  400706:	6a1b      	ldr	r3, [r3, #32]
  400708:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40070c:	d003      	beq.n	400716 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40070e:	4a2a      	ldr	r2, [pc, #168]	; (4007b8 <SystemCoreClockUpdate+0xfc>)
  400710:	4b27      	ldr	r3, [pc, #156]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400712:	601a      	str	r2, [r3, #0]
  400714:	e7db      	b.n	4006ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400716:	4a29      	ldr	r2, [pc, #164]	; (4007bc <SystemCoreClockUpdate+0x100>)
  400718:	4b25      	ldr	r3, [pc, #148]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  40071a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40071c:	4b23      	ldr	r3, [pc, #140]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  40071e:	6a1b      	ldr	r3, [r3, #32]
  400720:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400724:	2b10      	cmp	r3, #16
  400726:	d005      	beq.n	400734 <SystemCoreClockUpdate+0x78>
  400728:	2b20      	cmp	r3, #32
  40072a:	d1d0      	bne.n	4006ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40072c:	4a22      	ldr	r2, [pc, #136]	; (4007b8 <SystemCoreClockUpdate+0xfc>)
  40072e:	4b20      	ldr	r3, [pc, #128]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400730:	601a      	str	r2, [r3, #0]
          break;
  400732:	e7cc      	b.n	4006ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400734:	4a22      	ldr	r2, [pc, #136]	; (4007c0 <SystemCoreClockUpdate+0x104>)
  400736:	4b1e      	ldr	r3, [pc, #120]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400738:	601a      	str	r2, [r3, #0]
          break;
  40073a:	e7c8      	b.n	4006ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40073c:	4b1b      	ldr	r3, [pc, #108]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  40073e:	6a1b      	ldr	r3, [r3, #32]
  400740:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400744:	d016      	beq.n	400774 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400746:	4a1c      	ldr	r2, [pc, #112]	; (4007b8 <SystemCoreClockUpdate+0xfc>)
  400748:	4b19      	ldr	r3, [pc, #100]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  40074a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40074c:	4b17      	ldr	r3, [pc, #92]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  40074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400750:	f003 0303 	and.w	r3, r3, #3
  400754:	2b02      	cmp	r3, #2
  400756:	d1ba      	bne.n	4006ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400758:	4a14      	ldr	r2, [pc, #80]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  40075a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40075c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40075e:	4814      	ldr	r0, [pc, #80]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400760:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400764:	6803      	ldr	r3, [r0, #0]
  400766:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40076a:	b2d2      	uxtb	r2, r2
  40076c:	fbb3 f3f2 	udiv	r3, r3, r2
  400770:	6003      	str	r3, [r0, #0]
  400772:	e7ac      	b.n	4006ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400774:	4a11      	ldr	r2, [pc, #68]	; (4007bc <SystemCoreClockUpdate+0x100>)
  400776:	4b0e      	ldr	r3, [pc, #56]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400778:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40077a:	4b0c      	ldr	r3, [pc, #48]	; (4007ac <SystemCoreClockUpdate+0xf0>)
  40077c:	6a1b      	ldr	r3, [r3, #32]
  40077e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400782:	2b10      	cmp	r3, #16
  400784:	d005      	beq.n	400792 <SystemCoreClockUpdate+0xd6>
  400786:	2b20      	cmp	r3, #32
  400788:	d1e0      	bne.n	40074c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40078a:	4a0b      	ldr	r2, [pc, #44]	; (4007b8 <SystemCoreClockUpdate+0xfc>)
  40078c:	4b08      	ldr	r3, [pc, #32]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  40078e:	601a      	str	r2, [r3, #0]
          break;
  400790:	e7dc      	b.n	40074c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400792:	4a0b      	ldr	r2, [pc, #44]	; (4007c0 <SystemCoreClockUpdate+0x104>)
  400794:	4b06      	ldr	r3, [pc, #24]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  400796:	601a      	str	r2, [r3, #0]
          break;
  400798:	e7d8      	b.n	40074c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40079a:	4a05      	ldr	r2, [pc, #20]	; (4007b0 <SystemCoreClockUpdate+0xf4>)
  40079c:	6813      	ldr	r3, [r2, #0]
  40079e:	4909      	ldr	r1, [pc, #36]	; (4007c4 <SystemCoreClockUpdate+0x108>)
  4007a0:	fba1 1303 	umull	r1, r3, r1, r3
  4007a4:	085b      	lsrs	r3, r3, #1
  4007a6:	6013      	str	r3, [r2, #0]
  4007a8:	4770      	bx	lr
  4007aa:	bf00      	nop
  4007ac:	400e0600 	.word	0x400e0600
  4007b0:	2040000c 	.word	0x2040000c
  4007b4:	400e1810 	.word	0x400e1810
  4007b8:	00b71b00 	.word	0x00b71b00
  4007bc:	003d0900 	.word	0x003d0900
  4007c0:	007a1200 	.word	0x007a1200
  4007c4:	aaaaaaab 	.word	0xaaaaaaab

004007c8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4007c8:	4b12      	ldr	r3, [pc, #72]	; (400814 <system_init_flash+0x4c>)
  4007ca:	4298      	cmp	r0, r3
  4007cc:	d911      	bls.n	4007f2 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4007ce:	4b12      	ldr	r3, [pc, #72]	; (400818 <system_init_flash+0x50>)
  4007d0:	4298      	cmp	r0, r3
  4007d2:	d913      	bls.n	4007fc <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4007d4:	4b11      	ldr	r3, [pc, #68]	; (40081c <system_init_flash+0x54>)
  4007d6:	4298      	cmp	r0, r3
  4007d8:	d914      	bls.n	400804 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4007da:	4b11      	ldr	r3, [pc, #68]	; (400820 <system_init_flash+0x58>)
  4007dc:	4298      	cmp	r0, r3
  4007de:	d915      	bls.n	40080c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4007e0:	4b10      	ldr	r3, [pc, #64]	; (400824 <system_init_flash+0x5c>)
  4007e2:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4007e4:	bf94      	ite	ls
  4007e6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4007ea:	4a0f      	ldrhi	r2, [pc, #60]	; (400828 <system_init_flash+0x60>)
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <system_init_flash+0x64>)
  4007ee:	601a      	str	r2, [r3, #0]
  4007f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4007f6:	4b0d      	ldr	r3, [pc, #52]	; (40082c <system_init_flash+0x64>)
  4007f8:	601a      	str	r2, [r3, #0]
  4007fa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007fc:	4a0c      	ldr	r2, [pc, #48]	; (400830 <system_init_flash+0x68>)
  4007fe:	4b0b      	ldr	r3, [pc, #44]	; (40082c <system_init_flash+0x64>)
  400800:	601a      	str	r2, [r3, #0]
  400802:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400804:	4a0b      	ldr	r2, [pc, #44]	; (400834 <system_init_flash+0x6c>)
  400806:	4b09      	ldr	r3, [pc, #36]	; (40082c <system_init_flash+0x64>)
  400808:	601a      	str	r2, [r3, #0]
  40080a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40080c:	4a0a      	ldr	r2, [pc, #40]	; (400838 <system_init_flash+0x70>)
  40080e:	4b07      	ldr	r3, [pc, #28]	; (40082c <system_init_flash+0x64>)
  400810:	601a      	str	r2, [r3, #0]
  400812:	4770      	bx	lr
  400814:	01312cff 	.word	0x01312cff
  400818:	026259ff 	.word	0x026259ff
  40081c:	039386ff 	.word	0x039386ff
  400820:	04c4b3ff 	.word	0x04c4b3ff
  400824:	05f5e0ff 	.word	0x05f5e0ff
  400828:	04000500 	.word	0x04000500
  40082c:	400e0c00 	.word	0x400e0c00
  400830:	04000100 	.word	0x04000100
  400834:	04000200 	.word	0x04000200
  400838:	04000300 	.word	0x04000300

0040083c <init>:
#define BUT_PIO_IDX       11
#define BUT_PIO_IDX_MASK (1u << BUT_PIO_IDX)

 
// Função de inicialização do uC
void init(void){
  40083c:	b510      	push	{r4, lr}
  40083e:	b082      	sub	sp, #8
	sysclk_init();
  400840:	4b0d      	ldr	r3, [pc, #52]	; (400878 <init+0x3c>)
  400842:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  400844:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400848:	4b0c      	ldr	r3, [pc, #48]	; (40087c <init+0x40>)
  40084a:	605a      	str	r2, [r3, #4]
	
	pmc_enable_periph_clk(PIN0_PIO_ID);
  40084c:	200a      	movs	r0, #10
  40084e:	4c0c      	ldr	r4, [pc, #48]	; (400880 <init+0x44>)
  400850:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PIO_ID);
  400852:	200c      	movs	r0, #12
  400854:	47a0      	blx	r4
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  400856:	2300      	movs	r3, #0
  400858:	f44f 7280 	mov.w	r2, #256	; 0x100
  40085c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400860:	4808      	ldr	r0, [pc, #32]	; (400884 <init+0x48>)
  400862:	4c09      	ldr	r4, [pc, #36]	; (400888 <init+0x4c>)
  400864:	47a0      	blx	r4
	pio_set_output(PIN0_PIO, PIN0_PIO_IDX_MASK, 0, 0, 0);
  400866:	2200      	movs	r2, #0
  400868:	9200      	str	r2, [sp, #0]
  40086a:	4613      	mov	r3, r2
  40086c:	2101      	movs	r1, #1
  40086e:	4807      	ldr	r0, [pc, #28]	; (40088c <init+0x50>)
  400870:	4c07      	ldr	r4, [pc, #28]	; (400890 <init+0x54>)
  400872:	47a0      	blx	r4
}
  400874:	b002      	add	sp, #8
  400876:	bd10      	pop	{r4, pc}
  400878:	004001ad 	.word	0x004001ad
  40087c:	400e1850 	.word	0x400e1850
  400880:	0040059d 	.word	0x0040059d
  400884:	400e1200 	.word	0x400e1200
  400888:	00400331 	.word	0x00400331
  40088c:	400e0e00 	.word	0x400e0e00
  400890:	00400307 	.word	0x00400307

00400894 <play>:
		} 
	}
	return 0;
}

void play(int duration[], int notes[], int n){
  400894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400898:	b085      	sub	sp, #20
  40089a:	4682      	mov	sl, r0
  40089c:	460d      	mov	r5, r1
  40089e:	4614      	mov	r4, r2
  4008a0:	9203      	str	r2, [sp, #12]
	int h;
	int delay;
	int dur;
	delay_s(0.5);
  4008a2:	4849      	ldr	r0, [pc, #292]	; (4009c8 <play+0x134>)
  4008a4:	4b49      	ldr	r3, [pc, #292]	; (4009cc <play+0x138>)
  4008a6:	4798      	blx	r3
	for(int i = 0; i < n; i++){
  4008a8:	2c00      	cmp	r4, #0
  4008aa:	f340 8089 	ble.w	4009c0 <play+0x12c>
  4008ae:	1f2b      	subs	r3, r5, #4
  4008b0:	9302      	str	r3, [sp, #8]
  4008b2:	f1aa 0a04 	sub.w	sl, sl, #4
  4008b6:	f04f 0b00 	mov.w	fp, #0
		h = 0;
		delay = 1000000/notes[i];
		dur = duration[i] * 1000;
		while(h<dur/delay){
			pio_clear(LED_PIO, LED_PIO_IDX_MASK);
			pio_set(PIN0_PIO, PIN0_PIO_IDX_MASK);
  4008ba:	4d45      	ldr	r5, [pc, #276]	; (4009d0 <play+0x13c>)
  4008bc:	e052      	b.n	400964 <play+0xd0>
			delay_us(delay/2);
  4008be:	2033      	movs	r0, #51	; 0x33
  4008c0:	4f42      	ldr	r7, [pc, #264]	; (4009cc <play+0x138>)
  4008c2:	47b8      	blx	r7
			
			pio_clear(PIN0_PIO, PIN0_PIO_IDX_MASK);
  4008c4:	2101      	movs	r1, #1
  4008c6:	4628      	mov	r0, r5
  4008c8:	47b0      	blx	r6
			pio_set(LED_PIO, LED_PIO_IDX_MASK);
  4008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
  4008ce:	4841      	ldr	r0, [pc, #260]	; (4009d4 <play+0x140>)
  4008d0:	4b41      	ldr	r3, [pc, #260]	; (4009d8 <play+0x144>)
  4008d2:	4798      	blx	r3
			delay_us(delay/2);
  4008d4:	2033      	movs	r0, #51	; 0x33
  4008d6:	47b8      	blx	r7
			
			h++;
  4008d8:	3401      	adds	r4, #1
		while(h<dur/delay){
  4008da:	454c      	cmp	r4, r9
  4008dc:	d019      	beq.n	400912 <play+0x7e>
			pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  4008de:	f44f 7180 	mov.w	r1, #256	; 0x100
  4008e2:	483c      	ldr	r0, [pc, #240]	; (4009d4 <play+0x140>)
  4008e4:	47b0      	blx	r6
			pio_set(PIN0_PIO, PIN0_PIO_IDX_MASK);
  4008e6:	2101      	movs	r1, #1
  4008e8:	4628      	mov	r0, r5
  4008ea:	4b3b      	ldr	r3, [pc, #236]	; (4009d8 <play+0x144>)
  4008ec:	4798      	blx	r3
			delay_us(delay/2);
  4008ee:	f108 0301 	add.w	r3, r8, #1
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d9e3      	bls.n	4008be <play+0x2a>
  4008f6:	9801      	ldr	r0, [sp, #4]
  4008f8:	4f34      	ldr	r7, [pc, #208]	; (4009cc <play+0x138>)
  4008fa:	47b8      	blx	r7
			pio_clear(PIN0_PIO, PIN0_PIO_IDX_MASK);
  4008fc:	2101      	movs	r1, #1
  4008fe:	4628      	mov	r0, r5
  400900:	47b0      	blx	r6
			pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400902:	f44f 7180 	mov.w	r1, #256	; 0x100
  400906:	4833      	ldr	r0, [pc, #204]	; (4009d4 <play+0x140>)
  400908:	4b33      	ldr	r3, [pc, #204]	; (4009d8 <play+0x144>)
  40090a:	4798      	blx	r3
			delay_us(delay/2);
  40090c:	9801      	ldr	r0, [sp, #4]
  40090e:	47b8      	blx	r7
  400910:	e7e2      	b.n	4008d8 <play+0x44>
		}
		if (pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK) == 0){
  400912:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400916:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40091a:	4628      	mov	r0, r5
  40091c:	4b2f      	ldr	r3, [pc, #188]	; (4009dc <play+0x148>)
  40091e:	4798      	blx	r3
  400920:	b9c0      	cbnz	r0, 400954 <play+0xc0>
			delay_s(0.5);
  400922:	4829      	ldr	r0, [pc, #164]	; (4009c8 <play+0x134>)
  400924:	4b29      	ldr	r3, [pc, #164]	; (4009cc <play+0x138>)
  400926:	4798      	blx	r3
			if (pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK) == 0) {
  400928:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40092c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400930:	4628      	mov	r0, r5
  400932:	4b2a      	ldr	r3, [pc, #168]	; (4009dc <play+0x148>)
  400934:	4798      	blx	r3
  400936:	2800      	cmp	r0, #0
  400938:	d042      	beq.n	4009c0 <play+0x12c>
				return;
			}
			while(pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK) == 1){
  40093a:	f44f 6600 	mov.w	r6, #2048	; 0x800
  40093e:	4c27      	ldr	r4, [pc, #156]	; (4009dc <play+0x148>)
  400940:	4632      	mov	r2, r6
  400942:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400946:	4628      	mov	r0, r5
  400948:	47a0      	blx	r4
  40094a:	2801      	cmp	r0, #1
  40094c:	d0f8      	beq.n	400940 <play+0xac>
			}
			delay_s(0.5);
  40094e:	481e      	ldr	r0, [pc, #120]	; (4009c8 <play+0x134>)
  400950:	4b1e      	ldr	r3, [pc, #120]	; (4009cc <play+0x138>)
  400952:	4798      	blx	r3
		}
		
		delay_us(65000);
  400954:	4822      	ldr	r0, [pc, #136]	; (4009e0 <play+0x14c>)
  400956:	4b1d      	ldr	r3, [pc, #116]	; (4009cc <play+0x138>)
  400958:	4798      	blx	r3
	for(int i = 0; i < n; i++){
  40095a:	f10b 0b01 	add.w	fp, fp, #1
  40095e:	9b03      	ldr	r3, [sp, #12]
  400960:	455b      	cmp	r3, fp
  400962:	d02d      	beq.n	4009c0 <play+0x12c>
		delay = 1000000/notes[i];
  400964:	9a02      	ldr	r2, [sp, #8]
  400966:	f852 3f04 	ldr.w	r3, [r2, #4]!
  40096a:	9202      	str	r2, [sp, #8]
  40096c:	4a1d      	ldr	r2, [pc, #116]	; (4009e4 <play+0x150>)
  40096e:	fb92 f8f3 	sdiv	r8, r2, r3
		dur = duration[i] * 1000;
  400972:	f85a 3f04 	ldr.w	r3, [sl, #4]!
  400976:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  40097a:	fb07 f703 	mul.w	r7, r7, r3
		while(h<dur/delay){
  40097e:	fb97 f9f8 	sdiv	r9, r7, r8
  400982:	f1b9 0f00 	cmp.w	r9, #0
  400986:	ddc4      	ble.n	400912 <play+0x7e>
			delay_us(delay/2);
  400988:	4640      	mov	r0, r8
  40098a:	f1b8 0f00 	cmp.w	r8, #0
  40098e:	bfb8      	it	lt
  400990:	f108 0001 	addlt.w	r0, r8, #1
  400994:	1040      	asrs	r0, r0, #1
  400996:	17c3      	asrs	r3, r0, #31
  400998:	4913      	ldr	r1, [pc, #76]	; (4009e8 <play+0x154>)
  40099a:	fba0 0101 	umull	r0, r1, r0, r1
  40099e:	4c12      	ldr	r4, [pc, #72]	; (4009e8 <play+0x154>)
  4009a0:	fb04 1103 	mla	r1, r4, r3, r1
  4009a4:	4a11      	ldr	r2, [pc, #68]	; (4009ec <play+0x158>)
  4009a6:	2300      	movs	r3, #0
  4009a8:	4e11      	ldr	r6, [pc, #68]	; (4009f0 <play+0x15c>)
  4009aa:	2700      	movs	r7, #0
  4009ac:	1836      	adds	r6, r6, r0
  4009ae:	414f      	adcs	r7, r1
  4009b0:	4630      	mov	r0, r6
  4009b2:	4639      	mov	r1, r7
  4009b4:	4c0f      	ldr	r4, [pc, #60]	; (4009f4 <play+0x160>)
  4009b6:	47a0      	blx	r4
  4009b8:	9001      	str	r0, [sp, #4]
  4009ba:	2400      	movs	r4, #0
			pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  4009bc:	4e0e      	ldr	r6, [pc, #56]	; (4009f8 <play+0x164>)
  4009be:	e78e      	b.n	4008de <play+0x4a>
	}
	return;
  4009c0:	b005      	add	sp, #20
  4009c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009c6:	bf00      	nop
  4009c8:	0181d7b6 	.word	0x0181d7b6
  4009cc:	20400001 	.word	0x20400001
  4009d0:	400e0e00 	.word	0x400e0e00
  4009d4:	400e1200 	.word	0x400e1200
  4009d8:	0040021d 	.word	0x0040021d
  4009dc:	00400225 	.word	0x00400225
  4009e0:	003228d8 	.word	0x003228d8
  4009e4:	000f4240 	.word	0x000f4240
  4009e8:	11e1a300 	.word	0x11e1a300
  4009ec:	005a83e0 	.word	0x005a83e0
  4009f0:	005a83df 	.word	0x005a83df
  4009f4:	00400a35 	.word	0x00400a35
  4009f8:	00400221 	.word	0x00400221

004009fc <main>:
{
  4009fc:	b570      	push	{r4, r5, r6, lr}
	init();
  4009fe:	4b07      	ldr	r3, [pc, #28]	; (400a1c <main+0x20>)
  400a00:	4798      	blx	r3
			play(hb_duration, hb_notes, num);
  400a02:	4e07      	ldr	r6, [pc, #28]	; (400a20 <main+0x24>)
  400a04:	4d07      	ldr	r5, [pc, #28]	; (400a24 <main+0x28>)
  400a06:	4c08      	ldr	r4, [pc, #32]	; (400a28 <main+0x2c>)
  400a08:	221a      	movs	r2, #26
  400a0a:	4631      	mov	r1, r6
  400a0c:	4628      	mov	r0, r5
  400a0e:	47a0      	blx	r4
			play(caribe_duration, caribe_notes, num);
  400a10:	22cb      	movs	r2, #203	; 0xcb
  400a12:	4906      	ldr	r1, [pc, #24]	; (400a2c <main+0x30>)
  400a14:	4806      	ldr	r0, [pc, #24]	; (400a30 <main+0x34>)
  400a16:	47a0      	blx	r4
  400a18:	e7f6      	b.n	400a08 <main+0xc>
  400a1a:	bf00      	nop
  400a1c:	0040083d 	.word	0x0040083d
  400a20:	00401574 	.word	0x00401574
  400a24:	0040150c 	.word	0x0040150c
  400a28:	00400895 	.word	0x00400895
  400a2c:	004011e0 	.word	0x004011e0
  400a30:	00400eb4 	.word	0x00400eb4

00400a34 <__aeabi_uldivmod>:
  400a34:	b953      	cbnz	r3, 400a4c <__aeabi_uldivmod+0x18>
  400a36:	b94a      	cbnz	r2, 400a4c <__aeabi_uldivmod+0x18>
  400a38:	2900      	cmp	r1, #0
  400a3a:	bf08      	it	eq
  400a3c:	2800      	cmpeq	r0, #0
  400a3e:	bf1c      	itt	ne
  400a40:	f04f 31ff 	movne.w	r1, #4294967295
  400a44:	f04f 30ff 	movne.w	r0, #4294967295
  400a48:	f000 b97a 	b.w	400d40 <__aeabi_idiv0>
  400a4c:	f1ad 0c08 	sub.w	ip, sp, #8
  400a50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  400a54:	f000 f806 	bl	400a64 <__udivmoddi4>
  400a58:	f8dd e004 	ldr.w	lr, [sp, #4]
  400a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400a60:	b004      	add	sp, #16
  400a62:	4770      	bx	lr

00400a64 <__udivmoddi4>:
  400a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a68:	468c      	mov	ip, r1
  400a6a:	460d      	mov	r5, r1
  400a6c:	4604      	mov	r4, r0
  400a6e:	9e08      	ldr	r6, [sp, #32]
  400a70:	2b00      	cmp	r3, #0
  400a72:	d151      	bne.n	400b18 <__udivmoddi4+0xb4>
  400a74:	428a      	cmp	r2, r1
  400a76:	4617      	mov	r7, r2
  400a78:	d96d      	bls.n	400b56 <__udivmoddi4+0xf2>
  400a7a:	fab2 fe82 	clz	lr, r2
  400a7e:	f1be 0f00 	cmp.w	lr, #0
  400a82:	d00b      	beq.n	400a9c <__udivmoddi4+0x38>
  400a84:	f1ce 0c20 	rsb	ip, lr, #32
  400a88:	fa01 f50e 	lsl.w	r5, r1, lr
  400a8c:	fa20 fc0c 	lsr.w	ip, r0, ip
  400a90:	fa02 f70e 	lsl.w	r7, r2, lr
  400a94:	ea4c 0c05 	orr.w	ip, ip, r5
  400a98:	fa00 f40e 	lsl.w	r4, r0, lr
  400a9c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  400aa0:	0c25      	lsrs	r5, r4, #16
  400aa2:	fbbc f8fa 	udiv	r8, ip, sl
  400aa6:	fa1f f987 	uxth.w	r9, r7
  400aaa:	fb0a cc18 	mls	ip, sl, r8, ip
  400aae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  400ab2:	fb08 f309 	mul.w	r3, r8, r9
  400ab6:	42ab      	cmp	r3, r5
  400ab8:	d90a      	bls.n	400ad0 <__udivmoddi4+0x6c>
  400aba:	19ed      	adds	r5, r5, r7
  400abc:	f108 32ff 	add.w	r2, r8, #4294967295
  400ac0:	f080 8123 	bcs.w	400d0a <__udivmoddi4+0x2a6>
  400ac4:	42ab      	cmp	r3, r5
  400ac6:	f240 8120 	bls.w	400d0a <__udivmoddi4+0x2a6>
  400aca:	f1a8 0802 	sub.w	r8, r8, #2
  400ace:	443d      	add	r5, r7
  400ad0:	1aed      	subs	r5, r5, r3
  400ad2:	b2a4      	uxth	r4, r4
  400ad4:	fbb5 f0fa 	udiv	r0, r5, sl
  400ad8:	fb0a 5510 	mls	r5, sl, r0, r5
  400adc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400ae0:	fb00 f909 	mul.w	r9, r0, r9
  400ae4:	45a1      	cmp	r9, r4
  400ae6:	d909      	bls.n	400afc <__udivmoddi4+0x98>
  400ae8:	19e4      	adds	r4, r4, r7
  400aea:	f100 33ff 	add.w	r3, r0, #4294967295
  400aee:	f080 810a 	bcs.w	400d06 <__udivmoddi4+0x2a2>
  400af2:	45a1      	cmp	r9, r4
  400af4:	f240 8107 	bls.w	400d06 <__udivmoddi4+0x2a2>
  400af8:	3802      	subs	r0, #2
  400afa:	443c      	add	r4, r7
  400afc:	eba4 0409 	sub.w	r4, r4, r9
  400b00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400b04:	2100      	movs	r1, #0
  400b06:	2e00      	cmp	r6, #0
  400b08:	d061      	beq.n	400bce <__udivmoddi4+0x16a>
  400b0a:	fa24 f40e 	lsr.w	r4, r4, lr
  400b0e:	2300      	movs	r3, #0
  400b10:	6034      	str	r4, [r6, #0]
  400b12:	6073      	str	r3, [r6, #4]
  400b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b18:	428b      	cmp	r3, r1
  400b1a:	d907      	bls.n	400b2c <__udivmoddi4+0xc8>
  400b1c:	2e00      	cmp	r6, #0
  400b1e:	d054      	beq.n	400bca <__udivmoddi4+0x166>
  400b20:	2100      	movs	r1, #0
  400b22:	e886 0021 	stmia.w	r6, {r0, r5}
  400b26:	4608      	mov	r0, r1
  400b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b2c:	fab3 f183 	clz	r1, r3
  400b30:	2900      	cmp	r1, #0
  400b32:	f040 808e 	bne.w	400c52 <__udivmoddi4+0x1ee>
  400b36:	42ab      	cmp	r3, r5
  400b38:	d302      	bcc.n	400b40 <__udivmoddi4+0xdc>
  400b3a:	4282      	cmp	r2, r0
  400b3c:	f200 80fa 	bhi.w	400d34 <__udivmoddi4+0x2d0>
  400b40:	1a84      	subs	r4, r0, r2
  400b42:	eb65 0503 	sbc.w	r5, r5, r3
  400b46:	2001      	movs	r0, #1
  400b48:	46ac      	mov	ip, r5
  400b4a:	2e00      	cmp	r6, #0
  400b4c:	d03f      	beq.n	400bce <__udivmoddi4+0x16a>
  400b4e:	e886 1010 	stmia.w	r6, {r4, ip}
  400b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b56:	b912      	cbnz	r2, 400b5e <__udivmoddi4+0xfa>
  400b58:	2701      	movs	r7, #1
  400b5a:	fbb7 f7f2 	udiv	r7, r7, r2
  400b5e:	fab7 fe87 	clz	lr, r7
  400b62:	f1be 0f00 	cmp.w	lr, #0
  400b66:	d134      	bne.n	400bd2 <__udivmoddi4+0x16e>
  400b68:	1beb      	subs	r3, r5, r7
  400b6a:	0c3a      	lsrs	r2, r7, #16
  400b6c:	fa1f fc87 	uxth.w	ip, r7
  400b70:	2101      	movs	r1, #1
  400b72:	fbb3 f8f2 	udiv	r8, r3, r2
  400b76:	0c25      	lsrs	r5, r4, #16
  400b78:	fb02 3318 	mls	r3, r2, r8, r3
  400b7c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400b80:	fb0c f308 	mul.w	r3, ip, r8
  400b84:	42ab      	cmp	r3, r5
  400b86:	d907      	bls.n	400b98 <__udivmoddi4+0x134>
  400b88:	19ed      	adds	r5, r5, r7
  400b8a:	f108 30ff 	add.w	r0, r8, #4294967295
  400b8e:	d202      	bcs.n	400b96 <__udivmoddi4+0x132>
  400b90:	42ab      	cmp	r3, r5
  400b92:	f200 80d1 	bhi.w	400d38 <__udivmoddi4+0x2d4>
  400b96:	4680      	mov	r8, r0
  400b98:	1aed      	subs	r5, r5, r3
  400b9a:	b2a3      	uxth	r3, r4
  400b9c:	fbb5 f0f2 	udiv	r0, r5, r2
  400ba0:	fb02 5510 	mls	r5, r2, r0, r5
  400ba4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  400ba8:	fb0c fc00 	mul.w	ip, ip, r0
  400bac:	45a4      	cmp	ip, r4
  400bae:	d907      	bls.n	400bc0 <__udivmoddi4+0x15c>
  400bb0:	19e4      	adds	r4, r4, r7
  400bb2:	f100 33ff 	add.w	r3, r0, #4294967295
  400bb6:	d202      	bcs.n	400bbe <__udivmoddi4+0x15a>
  400bb8:	45a4      	cmp	ip, r4
  400bba:	f200 80b8 	bhi.w	400d2e <__udivmoddi4+0x2ca>
  400bbe:	4618      	mov	r0, r3
  400bc0:	eba4 040c 	sub.w	r4, r4, ip
  400bc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400bc8:	e79d      	b.n	400b06 <__udivmoddi4+0xa2>
  400bca:	4631      	mov	r1, r6
  400bcc:	4630      	mov	r0, r6
  400bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bd2:	f1ce 0420 	rsb	r4, lr, #32
  400bd6:	fa05 f30e 	lsl.w	r3, r5, lr
  400bda:	fa07 f70e 	lsl.w	r7, r7, lr
  400bde:	fa20 f804 	lsr.w	r8, r0, r4
  400be2:	0c3a      	lsrs	r2, r7, #16
  400be4:	fa25 f404 	lsr.w	r4, r5, r4
  400be8:	ea48 0803 	orr.w	r8, r8, r3
  400bec:	fbb4 f1f2 	udiv	r1, r4, r2
  400bf0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  400bf4:	fb02 4411 	mls	r4, r2, r1, r4
  400bf8:	fa1f fc87 	uxth.w	ip, r7
  400bfc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  400c00:	fb01 f30c 	mul.w	r3, r1, ip
  400c04:	42ab      	cmp	r3, r5
  400c06:	fa00 f40e 	lsl.w	r4, r0, lr
  400c0a:	d909      	bls.n	400c20 <__udivmoddi4+0x1bc>
  400c0c:	19ed      	adds	r5, r5, r7
  400c0e:	f101 30ff 	add.w	r0, r1, #4294967295
  400c12:	f080 808a 	bcs.w	400d2a <__udivmoddi4+0x2c6>
  400c16:	42ab      	cmp	r3, r5
  400c18:	f240 8087 	bls.w	400d2a <__udivmoddi4+0x2c6>
  400c1c:	3902      	subs	r1, #2
  400c1e:	443d      	add	r5, r7
  400c20:	1aeb      	subs	r3, r5, r3
  400c22:	fa1f f588 	uxth.w	r5, r8
  400c26:	fbb3 f0f2 	udiv	r0, r3, r2
  400c2a:	fb02 3310 	mls	r3, r2, r0, r3
  400c2e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400c32:	fb00 f30c 	mul.w	r3, r0, ip
  400c36:	42ab      	cmp	r3, r5
  400c38:	d907      	bls.n	400c4a <__udivmoddi4+0x1e6>
  400c3a:	19ed      	adds	r5, r5, r7
  400c3c:	f100 38ff 	add.w	r8, r0, #4294967295
  400c40:	d26f      	bcs.n	400d22 <__udivmoddi4+0x2be>
  400c42:	42ab      	cmp	r3, r5
  400c44:	d96d      	bls.n	400d22 <__udivmoddi4+0x2be>
  400c46:	3802      	subs	r0, #2
  400c48:	443d      	add	r5, r7
  400c4a:	1aeb      	subs	r3, r5, r3
  400c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  400c50:	e78f      	b.n	400b72 <__udivmoddi4+0x10e>
  400c52:	f1c1 0720 	rsb	r7, r1, #32
  400c56:	fa22 f807 	lsr.w	r8, r2, r7
  400c5a:	408b      	lsls	r3, r1
  400c5c:	fa05 f401 	lsl.w	r4, r5, r1
  400c60:	ea48 0303 	orr.w	r3, r8, r3
  400c64:	fa20 fe07 	lsr.w	lr, r0, r7
  400c68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  400c6c:	40fd      	lsrs	r5, r7
  400c6e:	ea4e 0e04 	orr.w	lr, lr, r4
  400c72:	fbb5 f9fc 	udiv	r9, r5, ip
  400c76:	ea4f 441e 	mov.w	r4, lr, lsr #16
  400c7a:	fb0c 5519 	mls	r5, ip, r9, r5
  400c7e:	fa1f f883 	uxth.w	r8, r3
  400c82:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  400c86:	fb09 f408 	mul.w	r4, r9, r8
  400c8a:	42ac      	cmp	r4, r5
  400c8c:	fa02 f201 	lsl.w	r2, r2, r1
  400c90:	fa00 fa01 	lsl.w	sl, r0, r1
  400c94:	d908      	bls.n	400ca8 <__udivmoddi4+0x244>
  400c96:	18ed      	adds	r5, r5, r3
  400c98:	f109 30ff 	add.w	r0, r9, #4294967295
  400c9c:	d243      	bcs.n	400d26 <__udivmoddi4+0x2c2>
  400c9e:	42ac      	cmp	r4, r5
  400ca0:	d941      	bls.n	400d26 <__udivmoddi4+0x2c2>
  400ca2:	f1a9 0902 	sub.w	r9, r9, #2
  400ca6:	441d      	add	r5, r3
  400ca8:	1b2d      	subs	r5, r5, r4
  400caa:	fa1f fe8e 	uxth.w	lr, lr
  400cae:	fbb5 f0fc 	udiv	r0, r5, ip
  400cb2:	fb0c 5510 	mls	r5, ip, r0, r5
  400cb6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  400cba:	fb00 f808 	mul.w	r8, r0, r8
  400cbe:	45a0      	cmp	r8, r4
  400cc0:	d907      	bls.n	400cd2 <__udivmoddi4+0x26e>
  400cc2:	18e4      	adds	r4, r4, r3
  400cc4:	f100 35ff 	add.w	r5, r0, #4294967295
  400cc8:	d229      	bcs.n	400d1e <__udivmoddi4+0x2ba>
  400cca:	45a0      	cmp	r8, r4
  400ccc:	d927      	bls.n	400d1e <__udivmoddi4+0x2ba>
  400cce:	3802      	subs	r0, #2
  400cd0:	441c      	add	r4, r3
  400cd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  400cd6:	eba4 0408 	sub.w	r4, r4, r8
  400cda:	fba0 8902 	umull	r8, r9, r0, r2
  400cde:	454c      	cmp	r4, r9
  400ce0:	46c6      	mov	lr, r8
  400ce2:	464d      	mov	r5, r9
  400ce4:	d315      	bcc.n	400d12 <__udivmoddi4+0x2ae>
  400ce6:	d012      	beq.n	400d0e <__udivmoddi4+0x2aa>
  400ce8:	b156      	cbz	r6, 400d00 <__udivmoddi4+0x29c>
  400cea:	ebba 030e 	subs.w	r3, sl, lr
  400cee:	eb64 0405 	sbc.w	r4, r4, r5
  400cf2:	fa04 f707 	lsl.w	r7, r4, r7
  400cf6:	40cb      	lsrs	r3, r1
  400cf8:	431f      	orrs	r7, r3
  400cfa:	40cc      	lsrs	r4, r1
  400cfc:	6037      	str	r7, [r6, #0]
  400cfe:	6074      	str	r4, [r6, #4]
  400d00:	2100      	movs	r1, #0
  400d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d06:	4618      	mov	r0, r3
  400d08:	e6f8      	b.n	400afc <__udivmoddi4+0x98>
  400d0a:	4690      	mov	r8, r2
  400d0c:	e6e0      	b.n	400ad0 <__udivmoddi4+0x6c>
  400d0e:	45c2      	cmp	sl, r8
  400d10:	d2ea      	bcs.n	400ce8 <__udivmoddi4+0x284>
  400d12:	ebb8 0e02 	subs.w	lr, r8, r2
  400d16:	eb69 0503 	sbc.w	r5, r9, r3
  400d1a:	3801      	subs	r0, #1
  400d1c:	e7e4      	b.n	400ce8 <__udivmoddi4+0x284>
  400d1e:	4628      	mov	r0, r5
  400d20:	e7d7      	b.n	400cd2 <__udivmoddi4+0x26e>
  400d22:	4640      	mov	r0, r8
  400d24:	e791      	b.n	400c4a <__udivmoddi4+0x1e6>
  400d26:	4681      	mov	r9, r0
  400d28:	e7be      	b.n	400ca8 <__udivmoddi4+0x244>
  400d2a:	4601      	mov	r1, r0
  400d2c:	e778      	b.n	400c20 <__udivmoddi4+0x1bc>
  400d2e:	3802      	subs	r0, #2
  400d30:	443c      	add	r4, r7
  400d32:	e745      	b.n	400bc0 <__udivmoddi4+0x15c>
  400d34:	4608      	mov	r0, r1
  400d36:	e708      	b.n	400b4a <__udivmoddi4+0xe6>
  400d38:	f1a8 0802 	sub.w	r8, r8, #2
  400d3c:	443d      	add	r5, r7
  400d3e:	e72b      	b.n	400b98 <__udivmoddi4+0x134>

00400d40 <__aeabi_idiv0>:
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop

00400d44 <__libc_init_array>:
  400d44:	b570      	push	{r4, r5, r6, lr}
  400d46:	4e0f      	ldr	r6, [pc, #60]	; (400d84 <__libc_init_array+0x40>)
  400d48:	4d0f      	ldr	r5, [pc, #60]	; (400d88 <__libc_init_array+0x44>)
  400d4a:	1b76      	subs	r6, r6, r5
  400d4c:	10b6      	asrs	r6, r6, #2
  400d4e:	bf18      	it	ne
  400d50:	2400      	movne	r4, #0
  400d52:	d005      	beq.n	400d60 <__libc_init_array+0x1c>
  400d54:	3401      	adds	r4, #1
  400d56:	f855 3b04 	ldr.w	r3, [r5], #4
  400d5a:	4798      	blx	r3
  400d5c:	42a6      	cmp	r6, r4
  400d5e:	d1f9      	bne.n	400d54 <__libc_init_array+0x10>
  400d60:	4e0a      	ldr	r6, [pc, #40]	; (400d8c <__libc_init_array+0x48>)
  400d62:	4d0b      	ldr	r5, [pc, #44]	; (400d90 <__libc_init_array+0x4c>)
  400d64:	1b76      	subs	r6, r6, r5
  400d66:	f000 fc3b 	bl	4015e0 <_init>
  400d6a:	10b6      	asrs	r6, r6, #2
  400d6c:	bf18      	it	ne
  400d6e:	2400      	movne	r4, #0
  400d70:	d006      	beq.n	400d80 <__libc_init_array+0x3c>
  400d72:	3401      	adds	r4, #1
  400d74:	f855 3b04 	ldr.w	r3, [r5], #4
  400d78:	4798      	blx	r3
  400d7a:	42a6      	cmp	r6, r4
  400d7c:	d1f9      	bne.n	400d72 <__libc_init_array+0x2e>
  400d7e:	bd70      	pop	{r4, r5, r6, pc}
  400d80:	bd70      	pop	{r4, r5, r6, pc}
  400d82:	bf00      	nop
  400d84:	004015ec 	.word	0x004015ec
  400d88:	004015ec 	.word	0x004015ec
  400d8c:	004015f4 	.word	0x004015f4
  400d90:	004015ec 	.word	0x004015ec

00400d94 <register_fini>:
  400d94:	4b02      	ldr	r3, [pc, #8]	; (400da0 <register_fini+0xc>)
  400d96:	b113      	cbz	r3, 400d9e <register_fini+0xa>
  400d98:	4802      	ldr	r0, [pc, #8]	; (400da4 <register_fini+0x10>)
  400d9a:	f000 b805 	b.w	400da8 <atexit>
  400d9e:	4770      	bx	lr
  400da0:	00000000 	.word	0x00000000
  400da4:	00400db5 	.word	0x00400db5

00400da8 <atexit>:
  400da8:	2300      	movs	r3, #0
  400daa:	4601      	mov	r1, r0
  400dac:	461a      	mov	r2, r3
  400dae:	4618      	mov	r0, r3
  400db0:	f000 b81e 	b.w	400df0 <__register_exitproc>

00400db4 <__libc_fini_array>:
  400db4:	b538      	push	{r3, r4, r5, lr}
  400db6:	4c0a      	ldr	r4, [pc, #40]	; (400de0 <__libc_fini_array+0x2c>)
  400db8:	4d0a      	ldr	r5, [pc, #40]	; (400de4 <__libc_fini_array+0x30>)
  400dba:	1b64      	subs	r4, r4, r5
  400dbc:	10a4      	asrs	r4, r4, #2
  400dbe:	d00a      	beq.n	400dd6 <__libc_fini_array+0x22>
  400dc0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400dc4:	3b01      	subs	r3, #1
  400dc6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400dca:	3c01      	subs	r4, #1
  400dcc:	f855 3904 	ldr.w	r3, [r5], #-4
  400dd0:	4798      	blx	r3
  400dd2:	2c00      	cmp	r4, #0
  400dd4:	d1f9      	bne.n	400dca <__libc_fini_array+0x16>
  400dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400dda:	f000 bc0b 	b.w	4015f4 <_fini>
  400dde:	bf00      	nop
  400de0:	00401604 	.word	0x00401604
  400de4:	00401600 	.word	0x00401600

00400de8 <__retarget_lock_acquire_recursive>:
  400de8:	4770      	bx	lr
  400dea:	bf00      	nop

00400dec <__retarget_lock_release_recursive>:
  400dec:	4770      	bx	lr
  400dee:	bf00      	nop

00400df0 <__register_exitproc>:
  400df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400df4:	4d2c      	ldr	r5, [pc, #176]	; (400ea8 <__register_exitproc+0xb8>)
  400df6:	4606      	mov	r6, r0
  400df8:	6828      	ldr	r0, [r5, #0]
  400dfa:	4698      	mov	r8, r3
  400dfc:	460f      	mov	r7, r1
  400dfe:	4691      	mov	r9, r2
  400e00:	f7ff fff2 	bl	400de8 <__retarget_lock_acquire_recursive>
  400e04:	4b29      	ldr	r3, [pc, #164]	; (400eac <__register_exitproc+0xbc>)
  400e06:	681c      	ldr	r4, [r3, #0]
  400e08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400e0c:	2b00      	cmp	r3, #0
  400e0e:	d03e      	beq.n	400e8e <__register_exitproc+0x9e>
  400e10:	685a      	ldr	r2, [r3, #4]
  400e12:	2a1f      	cmp	r2, #31
  400e14:	dc1c      	bgt.n	400e50 <__register_exitproc+0x60>
  400e16:	f102 0e01 	add.w	lr, r2, #1
  400e1a:	b176      	cbz	r6, 400e3a <__register_exitproc+0x4a>
  400e1c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400e20:	2401      	movs	r4, #1
  400e22:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400e26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400e2a:	4094      	lsls	r4, r2
  400e2c:	4320      	orrs	r0, r4
  400e2e:	2e02      	cmp	r6, #2
  400e30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400e34:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400e38:	d023      	beq.n	400e82 <__register_exitproc+0x92>
  400e3a:	3202      	adds	r2, #2
  400e3c:	f8c3 e004 	str.w	lr, [r3, #4]
  400e40:	6828      	ldr	r0, [r5, #0]
  400e42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400e46:	f7ff ffd1 	bl	400dec <__retarget_lock_release_recursive>
  400e4a:	2000      	movs	r0, #0
  400e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e50:	4b17      	ldr	r3, [pc, #92]	; (400eb0 <__register_exitproc+0xc0>)
  400e52:	b30b      	cbz	r3, 400e98 <__register_exitproc+0xa8>
  400e54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400e58:	f3af 8000 	nop.w
  400e5c:	4603      	mov	r3, r0
  400e5e:	b1d8      	cbz	r0, 400e98 <__register_exitproc+0xa8>
  400e60:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400e64:	6002      	str	r2, [r0, #0]
  400e66:	2100      	movs	r1, #0
  400e68:	6041      	str	r1, [r0, #4]
  400e6a:	460a      	mov	r2, r1
  400e6c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400e70:	f04f 0e01 	mov.w	lr, #1
  400e74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400e78:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400e7c:	2e00      	cmp	r6, #0
  400e7e:	d0dc      	beq.n	400e3a <__register_exitproc+0x4a>
  400e80:	e7cc      	b.n	400e1c <__register_exitproc+0x2c>
  400e82:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400e86:	430c      	orrs	r4, r1
  400e88:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400e8c:	e7d5      	b.n	400e3a <__register_exitproc+0x4a>
  400e8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400e92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400e96:	e7bb      	b.n	400e10 <__register_exitproc+0x20>
  400e98:	6828      	ldr	r0, [r5, #0]
  400e9a:	f7ff ffa7 	bl	400dec <__retarget_lock_release_recursive>
  400e9e:	f04f 30ff 	mov.w	r0, #4294967295
  400ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ea6:	bf00      	nop
  400ea8:	20400438 	.word	0x20400438
  400eac:	004015dc 	.word	0x004015dc
  400eb0:	00000000 	.word	0x00000000

00400eb4 <caribe_duration>:
  400eb4:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  400ec4:	0000007d 0000007d 0000007d 000000fa     }...}...}.......
  400ed4:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  400ee4:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  400ef4:	0000007d 00000177 0000007d 0000007d     }...w...}...}...
  400f04:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  400f14:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  400f24:	0000007d 0000007d 0000007d 000000fa     }...}...}.......
  400f34:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  400f44:	00000177 0000007d 0000007d 0000007d     w...}...}...}...
  400f54:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  400f64:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  400f74:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  400f84:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  400f94:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  400fa4:	000000fa 0000007d 0000007d 000000fa     ....}...}.......
  400fb4:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  400fc4:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  400fd4:	0000007d 0000007d 00000177 00000177     }...}...w...w...
  400fe4:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  400ff4:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  401004:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  401014:	0000007d 0000007d 00000177 0000007d     }...}...w...}...
  401024:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  401034:	0000007d 0000007d 0000007d 000000fa     }...}...}.......
  401044:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  401054:	000000fa 0000007d 0000007d 0000007d     ....}...}...}...
  401064:	0000007d 00000177 0000007d 0000007d     }...w...}...}...
  401074:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  401084:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  401094:	0000007d 0000007d 0000007d 000000fa     }...}...}.......
  4010a4:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  4010b4:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  4010c4:	0000007d 000000fa 0000007d 0000007d     }.......}...}...
  4010d4:	000000fa 0000007d 000000fa 0000007d     ....}.......}...
  4010e4:	0000007d 0000007d 000000fa 0000007d     }...}.......}...
  4010f4:	0000007d 0000007d 0000007d 00000177     }...}...}...w...
  401104:	00000177 000000fa 0000007d 00000177     w.......}...w...
  401114:	000000fa 0000007d 00000177 0000007d     ....}...w...}...
  401124:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  401134:	0000007d 0000007d 0000007d 00000177     }...}...}...w...
  401144:	000000fa 0000007d 00000177 000000fa     ....}...w.......
  401154:	0000007d 00000177 0000007d 0000007d     }...w...}...}...
  401164:	0000007d 0000007d 0000007d 000001f4     }...}...}.......
  401174:	000000fa 0000007d 00000177 000000fa     ....}...w.......
  401184:	0000007d 00000177 0000007d 0000007d     }...w...}...}...
  401194:	0000007d 0000007d 0000007d 0000007d     }...}...}...}...
  4011a4:	0000007d 0000007d 00000177 000000fa     }...}...w.......
  4011b4:	0000007d 00000177 000000fa 0000007d     }...w.......}...
  4011c4:	00000177 0000007d 0000007d 0000007d     w...}...}...}...
  4011d4:	0000007d 0000007d 000001f4              }...}.......

004011e0 <caribe_notes>:
  4011e0:	0000014a 00000188 000001b8 000001b8     J...............
  4011f0:	00000000 000001b8 000001ee 0000020b     ................
  401200:	0000020b 00000000 0000020b 0000024b     ............K...
  401210:	000001ee 000001ee 00000000 000001b8     ................
  401220:	00000188 000001b8 00000000 0000014a     ............J...
  401230:	00000188 000001b8 000001b8 00000000     ................
  401240:	000001b8 000001ee 0000020b 0000020b     ................
  401250:	00000000 0000020b 0000024b 000001ee     ........K.......
  401260:	000001ee 00000000 000001b8 00000188     ................
  401270:	000001b8 00000000 0000014a 00000188     ........J.......
  401280:	000001b8 000001b8 00000000 000001b8     ................
  401290:	0000020b 0000024b 0000024b 00000000     ....K...K.......
  4012a0:	0000024b 00000293 000002ba 000002ba     K...............
  4012b0:	00000000 00000293 0000024b 00000293     ........K.......
  4012c0:	000001b8 00000000 000001b8 000001ee     ................
  4012d0:	0000020b 0000020b 00000000 0000024b     ............K...
  4012e0:	00000293 000001b8 00000000 000001b8     ................
  4012f0:	0000020b 000001ee 000001ee 00000000     ................
  401300:	0000020b 000001b8 000001ee 00000000     ................
  401310:	000001b8 000001b8 000001b8 000001ee     ................
  401320:	0000020b 0000020b 00000000 0000020b     ................
  401330:	0000024b 000001ee 000001ee 00000000     K...............
  401340:	000001b8 00000188 000001b8 00000000     ................
  401350:	0000014a 00000188 000001b8 000001b8     J...............
  401360:	00000000 000001b8 000001ee 0000020b     ................
  401370:	0000020b 00000000 0000020b 0000024b     ............K...
  401380:	000001ee 000001ee 00000000 000001b8     ................
  401390:	00000188 000001b8 00000000 0000014a     ............J...
  4013a0:	00000188 000001b8 000001b8 00000000     ................
  4013b0:	000001b8 0000020b 0000024b 0000024b     ........K...K...
  4013c0:	00000000 0000024b 00000293 000002ba     ....K...........
  4013d0:	000002ba 00000000 00000293 0000024b     ............K...
  4013e0:	00000293 000001b8 00000000 000001b8     ................
  4013f0:	000001ee 0000020b 0000020b 00000000     ................
  401400:	0000024b 00000293 000001b8 00000000     K...............
  401410:	000001b8 0000020b 000001ee 000001ee     ................
  401420:	00000000 0000020b 000001b8 000001ee     ................
  401430:	00000000 00000293 00000000 00000000     ................
  401440:	000002ba 00000000 00000000 00000293     ................
  401450:	00000293 00000000 00000310 00000000     ................
  401460:	00000293 0000024b 00000000 00000000     ....K...........
  401470:	0000024b 00000000 00000000 0000020b     K...............
	...
  401488:	000001ee 0000020b 00000000 000001ee     ................
  401498:	00000000 000001b8 00000293 00000000     ................
  4014a8:	00000000 000002ba 00000000 00000000     ................
  4014b8:	00000293 00000293 00000000 00000310     ................
  4014c8:	00000000 00000293 0000024b 00000000     ........K.......
  4014d8:	00000000 0000024b 00000000 00000000     ....K...........
  4014e8:	0000020b 00000000 00000000 000001ee     ................
  4014f8:	0000020b 00000000 000001ee 00000000     ................
  401508:	000001b8                                ....

0040150c <hb_duration>:
  40150c:	0000007d 0000007d 000000fa 000000fa     }...}...........
  40151c:	000000fa 000001f4 0000007d 0000007d     ........}...}...
  40152c:	000000fa 000000fa 000000fa 000001f4     ................
  40153c:	0000007d 0000007d 000000fa 000000fa     }...}...........
  40154c:	000000fa 000000fa 000000fa 0000007d     ............}...
  40155c:	0000007d 000000fa 000000fa 000000fa     }...............
  40156c:	000001f4 000000fa                       ........

00401574 <hb_notes>:
  401574:	00000188 00000188 000001b8 00000188     ................
  401584:	0000020b 000001ee 00000188 00000188     ................
  401594:	000001b8 00000188 0000024b 0000020b     ........K.......
  4015a4:	00000188 00000188 00000310 00000293     ................
  4015b4:	0000020b 000001ee 000001b8 000002ba     ................
  4015c4:	000002ba 00000293 0000020b 0000024b     ............K...
  4015d4:	0000020b 00000000                       ........

004015dc <_global_impure_ptr>:
  4015dc:	20400010                                ..@ 

004015e0 <_init>:
  4015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015e2:	bf00      	nop
  4015e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4015e6:	bc08      	pop	{r3}
  4015e8:	469e      	mov	lr, r3
  4015ea:	4770      	bx	lr

004015ec <__init_array_start>:
  4015ec:	00400d95 	.word	0x00400d95

004015f0 <__frame_dummy_init_array_entry>:
  4015f0:	00400165                                e.@.

004015f4 <_fini>:
  4015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015f6:	bf00      	nop
  4015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4015fa:	bc08      	pop	{r3}
  4015fc:	469e      	mov	lr, r3
  4015fe:	4770      	bx	lr

00401600 <__fini_array_start>:
  401600:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400438 <__atexit_recursive_mutex>:
20400438:	04c8 2040                                   ..@ 
